--[[
    Welcome to Temp's Function Service, Enjoy.
    
    Docs : 
    
    FSTABLE = {
		["Chat_Loading_Messages"] = false,
		["Chat_Report_Messages"] = false,
	}
	local FS = loadstring(game:HttpGet("https://raw.githubusercontent.com/0TEMPS/0TEMPS/main/FunctionService%202.0"))()
]]

-- // Start \\ --
local start = os.clock()
local RequestTime = os.date
local StartupTime = RequestTime "%I" .. ":" .. RequestTime "%M" .. RequestTime "%p"
local TotalCalls = 0

-- // Services \\ -- 
local Players = game:GetService("Players")
local TPS = game:GetService("TeleportService")
local MS = game:GetService("MarketplaceService")
local HTTPS = game:GetService("HttpService")
local PFS = game:GetService("PathfindingService")
local TextChatService = game:GetService("TextChatService")

local Player = Players.LocalPlayer
local PN = Player.Name
local CHAR = Player.Character
local HUMAN = CHAR.Humanoid
local HRP = CHAR.HumanoidRootPart

local REQUEST = (syn and syn.request) or (http and http.request) or http_request

FSRC = FSSettings["Chat_Report_Messages"]
FSLM = FSSettings["Chat_Loading_Messages"]

ApprovalWords = FSSettings["APPROVAL_WORDS"]
DisapprovalWords = FSSettings["DISAPPROVAL_WORDS"]

local PLACENAME = MS:GetProductInfo(game.PlaceId).Name

local RoliTableLoaded = false
local RolimonsItemTable

if game:FindFirstChild("TextChatService") then
	if TextChatService:FindFirstChild("TextChannels") then
		ChatServiceType = "TCS"
	else
		ChatServiceType = "LCS"
		SayMessageReq = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
	end
end

local abbreviations = {
	["K"] = 4,
	["M"] = 7,
	["B"] = 10,
	["T"] = 13,
	["Qd"] = 17,
	["Qn"] = 20,
}

function findUser(strng)
	local Found = false
	local PartialName = strng
	local foundPlayer
	local Players = game.Players:GetPlayers()
	for i = 1, #Players do
		local CurrentPlayer = Players[i]
		if string.lower(CurrentPlayer.Name):sub(1, #PartialName) == string.lower(PartialName) then
			foundPlayer = CurrentPlayer.Name
			Found = true
			
			return foundPlayer
		end
	end
	
	if Found == false then
		for i = 1, #Players do
			local CurrentPlayer = Players[i]
			if string.lower(CurrentPlayer.DisplayName):sub(1, #PartialName) == string.lower(PartialName) then
				foundPlayer = CurrentPlayer.Name
				break
			end
		end
	end
	
	return foundPlayer
end

local FunctionService = {}

function FunctionService.Report(msg,ChatLogsPublic)
	if ChatServiceType == "LCS" then
		if ChatLogsPublic == true then
			local args = {
				[1] = msg,
				[2] = "All"
			}

			SayMessageReq:FireServer(unpack(args))
			print(msg)
		else
			print(msg)
		end
	end
	if ChatServiceType == "TCS" then
		if ChatLogsPublic == true then
			local TextChannels = TextChatService:WaitForChild("TextChannels")

			TextChannels.RBXGeneral:SendAsync(msg)
			print(msg)
		else
			print(msg)
		end
	end
end

function FunctionService.ActiveCheck()
	FunctionService.Report("FunctionService (V2.0.0) is active.",FSLM)
end

function FunctionService.AutoFillPlayer(msg)
	local args = string.split(msg, " ")
	local player = args[#args]
	local suc, info = pcall(findUser(player))
	local returnstring = findUser(player)

	if info == "attempt to call a nil value" then
		returnstring = "Invalid username"
		warn("⚠️ FunctionService.AutoFillPlayer Error : "..info.." ("..returnstring..")")
	end

	return returnstring
end


FunctionService.Report("Temp's FunctionService Module Loaded, took "..FunctionService.percentround(os.clock()-start).." MS to complete.",FSLM)

return FunctionService
